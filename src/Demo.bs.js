// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("rescript/lib/js/list.js");
var $$String = require("rescript/lib/js/string.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_List = require("rescript/lib/js/belt_List.js");

function toString(t) {
  switch (t.TAG | 0) {
    case /* Var */0 :
        return t._0;
    case /* App */1 :
        return "(" + toString(t._0) + toString(t._1) + ")";
    case /* Fun */2 :
        return "(Î»" + t._0 + "." + toString(t._1) + ")";
    
  }
}

function equal(_s, _t) {
  while(true) {
    var t = _t;
    var s = _s;
    switch (s.TAG | 0) {
      case /* Var */0 :
          switch (t.TAG | 0) {
            case /* Var */0 :
                return s._0 === t._0;
            case /* App */1 :
            case /* Fun */2 :
                return false;
            
          }
      case /* App */1 :
          switch (t.TAG | 0) {
            case /* App */1 :
                if (!equal(s._0, t._0)) {
                  return false;
                }
                _t = t._1;
                _s = s._1;
                continue ;
            case /* Var */0 :
            case /* Fun */2 :
                return false;
            
          }
      case /* Fun */2 :
          switch (t.TAG | 0) {
            case /* Var */0 :
            case /* App */1 :
                return false;
            case /* Fun */2 :
                if (s._0 !== t._0) {
                  return false;
                }
                _t = t._1;
                _s = s._1;
                continue ;
            
          }
      
    }
  };
}

function getFreeVariables(t) {
  switch (t.TAG | 0) {
    case /* Var */0 :
        return {
                hd: t._0,
                tl: /* [] */0
              };
    case /* App */1 :
        return Belt_List.concatMany([
                    getFreeVariables(t._0),
                    getFreeVariables(t._1)
                  ]);
    case /* Fun */2 :
        var f = t._0;
        return Belt_List.keep(getFreeVariables(t._1), (function (x) {
                      return x !== f;
                    }));
    
  }
}

var nameOrder = {
  contents: 0
};

function getNewname(param) {
  nameOrder.contents = nameOrder.contents + 1 | 0;
  return "@" + nameOrder.contents.toString();
}

function subst(x, va, body) {
  switch (body.TAG | 0) {
    case /* Var */0 :
        if (body._0 === x) {
          return va;
        } else {
          return body;
        }
    case /* App */1 :
        return {
                TAG: /* App */1,
                _0: subst(x, va, body._0),
                _1: subst(x, va, body._1)
              };
    case /* Fun */2 :
        var arg = body._1;
        var f = body._0;
        if (!Belt_List.has(getFreeVariables(va), f, $$String.equal)) {
          if (f === x) {
            return body;
          } else {
            return {
                    TAG: /* Fun */2,
                    _0: f,
                    _1: subst(x, va, arg)
                  };
          }
        }
        var newSym = getNewname(undefined);
        var newArg = subst(f, {
              TAG: /* Var */0,
              _0: newSym
            }, arg);
        if (f === x) {
          return {
                  TAG: /* Fun */2,
                  _0: newSym,
                  _1: subst(newSym, va, newArg)
                };
        } else {
          return {
                  TAG: /* Fun */2,
                  _0: newSym,
                  _1: subst(x, va, newArg)
                };
        }
    
  }
}

function $$eval(_t) {
  while(true) {
    var t = _t;
    switch (t.TAG | 0) {
      case /* Var */0 :
          return t;
      case /* App */1 :
          var arg = t._1;
          var k = $$eval(t._0);
          switch (k.TAG | 0) {
            case /* Var */0 :
            case /* App */1 :
                return {
                        TAG: /* App */1,
                        _0: k,
                        _1: $$eval(arg)
                      };
            case /* Fun */2 :
                var va = $$eval(arg);
                _t = subst(k._0, va, k._1);
                continue ;
            
          }
      case /* Fun */2 :
          return {
                  TAG: /* Fun */2,
                  _0: t._0,
                  _1: $$eval(t._1)
                };
      
    }
  };
}

var Lambda = {
  toString: toString,
  equal: equal,
  getFreeVariables: getFreeVariables,
  nameOrder: nameOrder,
  getNewname: getNewname,
  subst: subst,
  $$eval: $$eval
};

var smallOmega = {
  TAG: /* Fun */2,
  _0: "x",
  _1: {
    TAG: /* App */1,
    _0: {
      TAG: /* Var */0,
      _0: "x"
    },
    _1: {
      TAG: /* Var */0,
      _0: "x"
    }
  }
};

var omega = {
  TAG: /* App */1,
  _0: smallOmega,
  _1: smallOmega
};

console.log(toString(omega));

var ycomb = {
  TAG: /* Fun */2,
  _0: "f",
  _1: {
    TAG: /* App */1,
    _0: {
      TAG: /* Fun */2,
      _0: "x",
      _1: {
        TAG: /* App */1,
        _0: {
          TAG: /* Var */0,
          _0: "f"
        },
        _1: {
          TAG: /* App */1,
          _0: {
            TAG: /* Var */0,
            _0: "x"
          },
          _1: {
            TAG: /* Var */0,
            _0: "x"
          }
        }
      }
    },
    _1: {
      TAG: /* Fun */2,
      _0: "x",
      _1: {
        TAG: /* App */1,
        _0: {
          TAG: /* Var */0,
          _0: "f"
        },
        _1: {
          TAG: /* App */1,
          _0: {
            TAG: /* Var */0,
            _0: "x"
          },
          _1: {
            TAG: /* Var */0,
            _0: "x"
          }
        }
      }
    }
  }
};

console.log(toString(ycomb));

var succ = {
  TAG: /* Fun */2,
  _0: "n",
  _1: {
    TAG: /* Fun */2,
    _0: "f",
    _1: {
      TAG: /* Fun */2,
      _0: "x",
      _1: {
        TAG: /* App */1,
        _0: {
          TAG: /* Var */0,
          _0: "f"
        },
        _1: {
          TAG: /* App */1,
          _0: {
            TAG: /* App */1,
            _0: {
              TAG: /* Var */0,
              _0: "n"
            },
            _1: {
              TAG: /* Var */0,
              _0: "f"
            }
          },
          _1: {
            TAG: /* Var */0,
            _0: "x"
          }
        }
      }
    }
  }
};

var zero = {
  TAG: /* Fun */2,
  _0: "f",
  _1: {
    TAG: /* Fun */2,
    _0: "x",
    _1: {
      TAG: /* Var */0,
      _0: "x"
    }
  }
};

var if_then_else = {
  TAG: /* Fun */2,
  _0: "t",
  _1: {
    TAG: /* Fun */2,
    _0: "x",
    _1: {
      TAG: /* Fun */2,
      _0: "y",
      _1: {
        TAG: /* App */1,
        _0: {
          TAG: /* App */1,
          _0: {
            TAG: /* Var */0,
            _0: "t"
          },
          _1: {
            TAG: /* Var */0,
            _0: "x"
          }
        },
        _1: {
          TAG: /* Var */0,
          _0: "y"
        }
      }
    }
  }
};

var trueC = {
  TAG: /* Fun */2,
  _0: "x",
  _1: {
    TAG: /* Fun */2,
    _0: "y",
    _1: {
      TAG: /* Var */0,
      _0: "x"
    }
  }
};

var falseC = {
  TAG: /* Fun */2,
  _0: "x",
  _1: {
    TAG: /* Fun */2,
    _0: "y",
    _1: {
      TAG: /* Var */0,
      _0: "y"
    }
  }
};

var add = {
  TAG: /* Fun */2,
  _0: "n",
  _1: {
    TAG: /* Fun */2,
    _0: "m",
    _1: {
      TAG: /* Fun */2,
      _0: "f",
      _1: {
        TAG: /* Fun */2,
        _0: "x",
        _1: {
          TAG: /* App */1,
          _0: {
            TAG: /* App */1,
            _0: {
              TAG: /* Var */0,
              _0: "n"
            },
            _1: {
              TAG: /* Var */0,
              _0: "f"
            }
          },
          _1: {
            TAG: /* App */1,
            _0: {
              TAG: /* App */1,
              _0: {
                TAG: /* Var */0,
                _0: "m"
              },
              _1: {
                TAG: /* Var */0,
                _0: "f"
              }
            },
            _1: {
              TAG: /* Var */0,
              _0: "x"
            }
          }
        }
      }
    }
  }
};

var iszero_1 = {
  TAG: /* App */1,
  _0: {
    TAG: /* App */1,
    _0: {
      TAG: /* Var */0,
      _0: "n"
    },
    _1: {
      TAG: /* Fun */2,
      _0: "z",
      _1: falseC
    }
  },
  _1: trueC
};

var iszero = {
  TAG: /* Fun */2,
  _0: "n",
  _1: iszero_1
};

var pair = {
  TAG: /* Fun */2,
  _0: "x",
  _1: {
    TAG: /* Fun */2,
    _0: "y",
    _1: {
      TAG: /* Fun */2,
      _0: "z",
      _1: {
        TAG: /* App */1,
        _0: {
          TAG: /* App */1,
          _0: {
            TAG: /* Var */0,
            _0: "z"
          },
          _1: {
            TAG: /* Var */0,
            _0: "x"
          }
        },
        _1: {
          TAG: /* Var */0,
          _0: "y"
        }
      }
    }
  }
};

var fst_1 = {
  TAG: /* App */1,
  _0: {
    TAG: /* Var */0,
    _0: "p"
  },
  _1: trueC
};

var fst = {
  TAG: /* Fun */2,
  _0: "p",
  _1: fst_1
};

var snd_1 = {
  TAG: /* App */1,
  _0: {
    TAG: /* Var */0,
    _0: "p"
  },
  _1: falseC
};

var snd = {
  TAG: /* Fun */2,
  _0: "p",
  _1: snd_1
};

var pred_1 = {
  TAG: /* App */1,
  _0: fst,
  _1: {
    TAG: /* App */1,
    _0: {
      TAG: /* App */1,
      _0: {
        TAG: /* Var */0,
        _0: "n"
      },
      _1: {
        TAG: /* Fun */2,
        _0: "p",
        _1: {
          TAG: /* App */1,
          _0: {
            TAG: /* App */1,
            _0: pair,
            _1: {
              TAG: /* App */1,
              _0: snd,
              _1: {
                TAG: /* Var */0,
                _0: "p"
              }
            }
          },
          _1: {
            TAG: /* App */1,
            _0: succ,
            _1: {
              TAG: /* App */1,
              _0: snd,
              _1: {
                TAG: /* Var */0,
                _0: "p"
              }
            }
          }
        }
      }
    },
    _1: {
      TAG: /* App */1,
      _0: {
        TAG: /* App */1,
        _0: pair,
        _1: zero
      },
      _1: zero
    }
  }
};

var pred = {
  TAG: /* Fun */2,
  _0: "n",
  _1: pred_1
};

var f_1 = {
  TAG: /* Fun */2,
  _0: "n",
  _1: {
    TAG: /* Fun */2,
    _0: "m",
    _1: {
      TAG: /* App */1,
      _0: {
        TAG: /* App */1,
        _0: {
          TAG: /* App */1,
          _0: if_then_else,
          _1: {
            TAG: /* App */1,
            _0: iszero,
            _1: {
              TAG: /* Var */0,
              _0: "n"
            }
          }
        },
        _1: zero
      },
      _1: {
        TAG: /* App */1,
        _0: {
          TAG: /* App */1,
          _0: add,
          _1: {
            TAG: /* Var */0,
            _0: "m"
          }
        },
        _1: {
          TAG: /* App */1,
          _0: {
            TAG: /* App */1,
            _0: {
              TAG: /* Var */0,
              _0: "f"
            },
            _1: {
              TAG: /* App */1,
              _0: pred,
              _1: {
                TAG: /* Var */0,
                _0: "n"
              }
            }
          },
          _1: {
            TAG: /* Var */0,
            _0: "m"
          }
        }
      }
    }
  }
};

var f = {
  TAG: /* Fun */2,
  _0: "f",
  _1: f_1
};

var mulR = {
  TAG: /* App */1,
  _0: ycomb,
  _1: f
};

function toChurchNum(n) {
  var _n = n;
  var _churchNum = zero;
  while(true) {
    var churchNum = _churchNum;
    var n$1 = _n;
    if (n$1 < 0) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "Demo.res",
              200,
              14
            ],
            Error: new Error()
          };
    }
    if (n$1 === 0) {
      return churchNum;
    }
    _churchNum = {
      TAG: /* App */1,
      _0: succ,
      _1: churchNum
    };
    _n = n$1 - 1 | 0;
    continue ;
  };
}

var numbers_0 = toChurchNum(0);

var numbers_1 = {
  hd: toChurchNum(1),
  tl: {
    hd: toChurchNum(2),
    tl: {
      hd: toChurchNum(3),
      tl: {
        hd: toChurchNum(4),
        tl: {
          hd: toChurchNum(5),
          tl: /* [] */0
        }
      }
    }
  }
};

var numbers = {
  hd: numbers_0,
  tl: numbers_1
};

function churchNumToInt(t) {
  var f = {
    TAG: /* Var */0,
    _0: "f"
  };
  var x = {
    TAG: /* Var */0,
    _0: "x"
  };
  var va = $$eval({
        TAG: /* App */1,
        _0: {
          TAG: /* App */1,
          _0: t,
          _1: f
        },
        _1: x
      });
  var decomposeChurch = function (va$p, f$p, x$p) {
    switch (va$p.TAG | 0) {
      case /* Var */0 :
          if (Caml_obj.equal(va$p, x$p)) {
            return 0;
          }
          break;
      case /* App */1 :
          if (Caml_obj.equal(va$p._0, f$p)) {
            return decomposeChurch(va$p._1, f$p, x$p) + 1 | 0;
          }
          break;
      case /* Fun */2 :
          break;
      
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Demo.res",
            230,
            11
          ],
          Error: new Error()
        };
  };
  return decomposeChurch(va, f, x);
}

var mul2by2_0 = {
  TAG: /* App */1,
  _0: mulR,
  _1: toChurchNum(2)
};

var mul2by2_1 = toChurchNum(2);

var mul2by2 = {
  TAG: /* App */1,
  _0: mul2by2_0,
  _1: mul2by2_1
};

List.iter((function (x) {
        console.log(toString($$eval(x)));
      }), numbers);

List.iter((function (x) {
        console.log(toString($$eval({
                      TAG: /* App */1,
                      _0: pred,
                      _1: x
                    })));
      }), numbers);

console.log(churchNumToInt({
          TAG: /* App */1,
          _0: pred,
          _1: toChurchNum(15)
        }));

var one = {
  TAG: /* Fun */2,
  _0: "f",
  _1: {
    TAG: /* Fun */2,
    _0: "x",
    _1: {
      TAG: /* App */1,
      _0: {
        TAG: /* Var */0,
        _0: "f"
      },
      _1: {
        TAG: /* Var */0,
        _0: "x"
      }
    }
  }
};

var mul = {
  TAG: /* Fun */2,
  _0: "n",
  _1: {
    TAG: /* Fun */2,
    _0: "m",
    _1: {
      TAG: /* Fun */2,
      _0: "f",
      _1: {
        TAG: /* App */1,
        _0: {
          TAG: /* Var */0,
          _0: "n"
        },
        _1: {
          TAG: /* App */1,
          _0: {
            TAG: /* Var */0,
            _0: "m"
          },
          _1: {
            TAG: /* Var */0,
            _0: "f"
          }
        }
      }
    }
  }
};

var exp = {
  TAG: /* Fun */2,
  _0: "n",
  _1: {
    TAG: /* Fun */2,
    _0: "m",
    _1: {
      TAG: /* App */1,
      _0: {
        TAG: /* Var */0,
        _0: "m"
      },
      _1: {
        TAG: /* Var */0,
        _0: "n"
      }
    }
  }
};

exports.Lambda = Lambda;
exports.omega = omega;
exports.ycomb = ycomb;
exports.succ = succ;
exports.zero = zero;
exports.one = one;
exports.mul = mul;
exports.exp = exp;
exports.if_then_else = if_then_else;
exports.trueC = trueC;
exports.falseC = falseC;
exports.add = add;
exports.iszero = iszero;
exports.pair = pair;
exports.fst = fst;
exports.snd = snd;
exports.pred = pred;
exports.mulR = mulR;
exports.toChurchNum = toChurchNum;
exports.numbers = numbers;
exports.churchNumToInt = churchNumToInt;
exports.mul2by2 = mul2by2;
/*  Not a pure module */
